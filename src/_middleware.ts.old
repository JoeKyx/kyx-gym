import type { NextRequest } from 'next/server';
import { NextResponse } from 'next/server';

import logger from '@/lib/logger';

export async function middleware(req: NextRequest, res: NextResponse) {
  logger('Middleware called');
  const { origin } = req.nextUrl;
  const session = req.cookies.get('session');

  // Return to login if no session
  if (!session) {
    return NextResponse.redirect(new URL('/login', req.url));
  }

  // Check whether dev or prod
  const isDev = process.env.NEXT_PUBLIC_ENV === 'development';

  const baseApiUrl = isDev
    ? process.env.NEXT_PUBLIC_DEPLOYMENT_URL_DEV
    : process.env.NEXT_PUBLIC_DEPLOYMENT_URL_PROD;

  logger(baseApiUrl, 'Base API URL');

  // Call the authentication endpoint to check if the session is valid
  logger({ session }, 'middleware.ts line 25');
  const responseAPI = await fetch(`${origin}/api/login`, {
    headers: {
      cookie: `session=${session.value}`,
    },
  });

  // If the session is invalid, return to login
  if (responseAPI.status !== 200) {
    return NextResponse.redirect(new URL('/login', req.url));
  }
}

export const config = {
  matcher: ['/dashboard'],
};
